name: CI - Symfony HomeCyclHome API

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    name: 🔧 Build & Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17.5-bookworm
        env:
          POSTGRES_DB: symfony_test
          POSTGRES_USER: symfony
          POSTGRES_PASSWORD: symfony
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      APP_ENV: test
      DATABASE_URL: "postgresql://symfony:symfony@localhost:5432/symfony_test"
      JWT_PASSPHRASE: 15beed40ff99cd3c5e99fabed0c3592093ed4169015b5c9933977878e62152f5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📝 Create .env file manually
        run: |
          echo "APP_ENV=test" > .env
          echo "DATABASE_URL=postgresql://symfony:symfony@localhost:5432/symfony_test" >> .env
          echo "JWT_SECRET_KEY=%kernel.project_dir%/config/jwt/private.pem" >> .env
          echo "JWT_PUBLIC_KEY=%kernel.project_dir%/config/jwt/public.pem" >> .env
          echo "JWT_PASSPHRASE=${{ env.JWT_PASSPHRASE }}" >> .env

      - name: ⚙️ Set up PHP with extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: intl, pdo_pgsql, zip
          tools: composer
          coverage: xdebug

      - name: 📦 Install Composer dependencies
        run: composer install --prefer-dist --no-interaction

      - name: 🔐 Generate JWT keys
        run: php bin/console lexik:jwt:generate-keypair
        env:
          JWT_PASSPHRASE: ${{ env.JWT_PASSPHRASE }}

      - name: ⚙️ Prepare database
        run: |
          php bin/console doctrine:database:create --if-not-exists --env=test
          php bin/console doctrine:migrations:migrate --no-interaction --env=test

      - name: 🧪 Run PHPUnit tests
        run: php bin/phpunit --testdox --colors=always

      - name: 📊 Upload code coverage
        if: always()
        run: |
          mkdir -p coverage
          php bin/phpunit --coverage-html coverage
