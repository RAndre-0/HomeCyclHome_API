name: CI - Symfony HomeCyclHome API

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    name: 🔧 Build & Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17.5-bookworm
        env:
          POSTGRES_DB: symfony_test
          POSTGRES_USER: symfony
          POSTGRES_PASSWORD: symfony
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U symfony -d symfony_test -h 127.0.0.1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    env:
      APP_ENV: test
      DB_URL_LOCALHOST: postgresql://symfony:symfony@127.0.0.1:5432/symfony_test
      JWT_PASSPHRASE: 15beed40ff99cd3c5e99fabed0c3592093ed4169015b5c9933977878e62152f5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      # Purge les .env
      - name: 🧹 Purge .env* générés (sauf .dist)
        run: rm -f .env.local.php .env.*.local || true

      # créer un .env minimal pour satisfaire Dotenv
      - name: 📝 Create minimal .env
        run: |
          {
            echo "APP_ENV=test"
            echo "APP_DEBUG=0"
            echo "CORS_ALLOW_ORIGIN=^https?://(localhost|127\.0\.0\.1)(:[0-9]+)?(/.*)?$"
            echo "DATABASE_URL=${DB_URL_LOCALHOST}"
            echo "JWT_SECRET_KEY=%kernel.project_dir%/config/jwt/private.pem"
            echo "JWT_PUBLIC_KEY=%kernel.project_dir%/config/jwt/public.pem"
            echo "JWT_PASSPHRASE=${JWT_PASSPHRASE}"
          } > .env

      - name: ⚙️ Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'
          extensions: intl, pdo_pgsql, zip
          tools: composer
          coverage: xdebug

      - name: 📦 Composer install
        run: composer install --prefer-dist --no-interaction

      - name: 🔐 JWT keys
        run: php bin/console lexik:jwt:generate-keypair --overwrite --no-interaction
        env:
          JWT_PASSPHRASE: ${{ env.JWT_PASSPHRASE }}

      - name: ⚙️ DB create + migrate
        run: |
          DATABASE_URL='${{ env.DB_URL_LOCALHOST }}' php bin/console doctrine:database:create --if-not-exists --env=test
          DATABASE_URL='${{ env.DB_URL_LOCALHOST }}' php bin/console doctrine:migrations:migrate --no-interaction --env=test

      - name: 🧪 PHPUnit
        run: |
          DATABASE_URL='${{ env.DB_URL_LOCALHOST }}' php bin/phpunit --testdox --colors=always

      - name: 📊 Coverage HTML
        if: always()
        run: |
          mkdir -p coverage
          DATABASE_URL='${{ env.DB_URL_LOCALHOST }}' php bin/phpunit --coverage-html coverage
